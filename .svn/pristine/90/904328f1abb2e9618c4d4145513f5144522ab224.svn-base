package kr.co.coduck.web.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.coduck.dto.SearchTestDetailDto;
import kr.co.coduck.dto.SearchTestDto;
import kr.co.coduck.form.AddTestFormByExcel;
import kr.co.coduck.form.SearchTestFormByAdm;
import kr.co.coduck.service.AdminTestService;
import kr.co.coduck.service.CategoryService;
import kr.co.coduck.service.TestService;
import kr.co.coduck.vo.Category;
import kr.co.coduck.vo.Test;
import kr.co.coduck.vo.TestQt;

@Controller
@RequestMapping("/admin")
public class AdminTestController {
	
	@Autowired
	private AdminTestService adminTestService; 
	
	@Autowired
	private CategoryService categoryService;
	
	@Autowired
	private TestService testService;
	
	@GetMapping("/searchTestByAdm.hta")
	@ResponseBody
	public SearchTestDto searchTestByAdmin(SearchTestFormByAdm form){
		System.out.println("=============================");
		System.out.println("폼 조회 : " + form);
		System.out.println("=============================");
		System.out.println("관리자 시험 조회 : " + adminTestService.searchTestByAdm(form));
		
		SearchTestDto searchTestDto = new SearchTestDto();
		searchTestDto.setUpCategories(categoryService.getCatesByMainNo(20000));
		if(form.getMainCateNo() == -1) {
			searchTestDto.setDownCategories(categoryService.getTestCategoryByAdmin());
		} else {
			searchTestDto.setDownCategories(categoryService.getCatesByMainNo(form.getMainCateNo()));
		}
		
		if(form.getCateNo() == -1) {
			searchTestDto.setEps(testService.getAllTestEp());
		} else {
			searchTestDto.setEps(testService.getTestEpsByCateNo(form.getCateNo()));
		}
		searchTestDto.setSearchTestDetailDtos(adminTestService.searchTestByAdm(form));
		
		System.out.println("++++++++++++++++++++++++++++++++++++");
		System.out.println("searchTestDto : " + searchTestDto);
		return searchTestDto;
	}
	
	@GetMapping("/test.hta")
	public String test(Model model) {
		List<Category> testMainCates = categoryService.getCatesByMainNo(20000);
		model.addAttribute("testMainCates", testMainCates);
		return "admin/test";
	}
	
	@GetMapping("/getCates.hta")
	@ResponseBody
	public List<Category> getCates(@RequestParam("mainCateNo") int mainCateNo){
		System.out.println("maincateNo? " + mainCateNo);
		return categoryService.getCatesByMainNo(mainCateNo);
	}
	
	//엑셀로 시험 추가
	@PostMapping("/addTestByExcel.hta")
	public String addTest(AddTestFormByExcel form) throws Exception {
		
		System.out.println("=================form================" + form);
		
		if(form.getXlsfile().isEmpty()) {
			return "redirect:/admin/test.hta";
		}
		
		Workbook workBook = WorkbookFactory.create(form.getXlsfile().getInputStream());
		
		Sheet sheet = workBook.getSheetAt(0);
		
		Row mainRow = sheet.getRow(1);
		String name = mainRow.getCell(0).getStringCellValue();
		String testDate = mainRow.getCell(1).getStringCellValue();
		String ep = mainRow.getCell(2).getStringCellValue();
		int passScore = (int)mainRow.getCell(3).getNumericCellValue();
		int ltdTime = (int)mainRow.getCell(4).getNumericCellValue();
		int qtCnt = (int)mainRow.getCell(5).getNumericCellValue();
		
		Test test = new Test();
		SimpleDateFormat format = new SimpleDateFormat("yyyy.MM.dd");
		System.out.println("==========================================");
		System.out.println("testDate : " + testDate);
		test.setTestDate(format.parse(testDate));
		System.out.println("test.getTestDate() : " + test.getTestDate());
		test.setName(name);
		test.setEp(ep);
		test.setPrice(form.getPrice());
		test.setPassScore(passScore);
		test.setLtdTime(ltdTime);
		test.setQtCnt(qtCnt);
		test.setCateNo(form.getTestCateNo());
		
		testService.insertTest(test);
		
		int rowCnt = sheet.getLastRowNum();
		
		for(int i=10; i<=rowCnt; i++) {
			Row row = sheet.getRow(i);
			
			int num = (int)row.getCell(0).getNumericCellValue();
			String content = row.getCell(1).getStringCellValue();
			int score = (int)row.getCell(2).getNumericCellValue();
			String v1 = getCellValue(row.getCell(3));
			String v2 = getCellValue(row.getCell(4));
			String v3 = getCellValue(row.getCell(5));
			String v4 = getCellValue(row.getCell(6));
			int ans = (int)row.getCell(7).getNumericCellValue();
			int trueRate = (int)row.getCell(8).getNumericCellValue();
			String img = row.getCell(9).getStringCellValue();
			int subjNo = (int)row.getCell(10).getNumericCellValue();
			
			TestQt qt = new TestQt();
			qt.setNum(num);
			qt.setContent(content);
			qt.setScore(score);
			qt.setV1(v1);
			qt.setV2(v2);
			qt.setV3(v3);
			qt.setV4(v4);
			qt.setAns(ans);
			qt.setTrueRate(trueRate);
			qt.setImg(img);
			qt.setSubjNo(subjNo);
			qt.setTestNo(test.getNo());
			
			System.out.println("===================================");
			System.out.println("TestQt : " + qt);
			
			
			testService.insertTestQt(qt);
		}
		
		return "redirect:/admin/test.hta";
	}
	
	//셀의 값을 문자열로 읽어오기
	private String getCellValue(Cell cell) {
		if (cell.getCellType() == CellType.STRING) {
			return cell.getStringCellValue();
		}
		return String.valueOf(cell.getNumericCellValue());
	}
	
}
