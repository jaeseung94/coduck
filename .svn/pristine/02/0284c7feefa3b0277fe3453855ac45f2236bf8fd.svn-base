<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- namespace 필수 설정! -->
	<mapper namespace="kr.co.coduck.dao.LectDao">
	
	<!-- 유저번호로 유저가 등록한 강의 조회 -->
	<select id="getFindLectByUserNo" parameterType="int" resultType="Lect">
		select
			lect_no						as no,
			cate_no						as cateNo,
			user_no						as userNo,
			lect_title					as lectTitle,
			lect_info					as lectInfo,
			lect_price					as price,
			lect_discount_price			as discountPrice,
			lect_discount_rate			as discountRate,
			lect_is_freed				as isFreed,
			lect_is_display				as isDisplay,
			lect_create_date			as lectCreateDate,
			lect_grade					as grade,
			lect_tag					as tag,
			lect_image_path				as imagePath
		from
			lects
		where
			user_no = #{value}
			
	</select>
	
	<!-- 유저가 구매한 모든 강좌에들 중 각각의 진행률 등을 계산한 쿼리  -->
	<select id="getLectProcessivityByUserNo" parameterType="int" resultType="LessonDto">
		select 
			lect_no					 lectNo
			, round(nvl(viewCount /  decode(totalCount,0,null,totalCount),0)  * 100) percent
			, totalTime
			, totalAccumulate
			, totalCount
			, viewCount
		from 
			(select 
	        	lect_no                 				
		        , count(*) 			 totalCount     <!-- 총 레슨 개수 -->
		        , sum(total_time) 	 totalTime 		<!-- 총 레슨 시간 -->
		    from 
		    	lects
		    natural join chapters
	        natural join lessons
	        group by lect_no) A 					
		natural join 
			(select 
				lect_no              				
		    	, count(*) 				 viewCount 	 		<!-- 수강생이 본 레슨 개수 -->
		    	, sum(accumulate_time)   totalAccumulate    <!-- 수강생이 본 레슨들의 누적 시간 -->
		    from 
		    	lesson_histories 
		    where 
		    	user_no = #{value} 
		    and is_watched = 'Y'      
		    
		    group by lect_no) B 					
	</select>
	
	<!-- 유저 번호로 유저가 구매한 수강리스트 조회 -->
	<select id="getLectListUserByNo" parameterType="int" resultType="LessonDto">
		SELECT
			A.USER_NO				userNo,
			D.LECT_TITLE			lectTitle,
			B.ORD_LECT_CREATE_DATE	lectCreateDate,
			D.LECT_NO				lectNo
		FROM
			Users A, Ord_lects B, Ord_lect_infos C, lects D
		WHERE
			A.USER_NO = B.USER_NO
		AND
			B.ORD_NO = C.ORD_NO
		AND
			C.LECT_NO = D.LECT_NO
		AND
			A.USER_NO = #{value}
	</select>
	
	<select id="getLectByNo" parameterType="int" resultType="Lect">
		select
			lect_no						as no,
			cate_no						as cateNo,
			user_no						as userNo,
			lect_title					as lectTitle,
			lect_info					as lectInfo,
			lect_price					as price,
			lect_discount_price			as discountPrice,
			lect_discount_rate			as discountRate,
			lect_is_freed				as isFreed,
			lect_is_display				as isDisplay,
			lect_create_date			as lectCreateDate,
			lect_grade					as grade,
			lect_tag					as tag,
			lect_image_path				as imagePath
		from
			lects
		where
			lect_no = #{value}
	</select>
	
	<!-- 카테고리번호로 강좌 리스트 조회 -->
	<select id="getLectureByCategoryNo" parameterType="int" resultType="LectureDto">
		select
			l.lect_no					no,
			l.cate_no				 	cateNo,
			l.user_no					userNo,
			l.lect_title				title,
			l.lect_info					info,
			l.lect_price				price,
			l.lect_discount_price		discountPrice,
			l.lect_discount_rate		discountRate,
			l.lect_is_freed				isFreed,
			l.lect_is_display			isDisplay,
			l.lect_create_date			createDate,
			l.lect_grade				grade,
			l.lect_tag					tag,
			l.lect_image_path			imagePath,
			l.lect_sample_path			samplePath,
			u.user_name					userName
		from
			lects L, users U
		where
			l.user_no = u.user_no
			and l.lect_is_display = 'Y'	
		    and cate_no = #{value}
	</select>
	
	<!-- 강좌번호로 강좌 조회 -->
	<select id="getLectureByLectureNo" parameterType="int" resultType="LectureDto">
		select
			l.lect_no					no,
			l.cate_no				 	cateNo,
			l.user_no					userNo,
			l.lect_title				title,
			l.lect_info_title			infoTitle,
			l.lect_info					info,
			l.lect_price				price,
			l.lect_discount_price		discountPrice,
			l.lect_discount_rate		discountRate,
			l.lect_is_freed				isFreed,
			l.lect_is_display			isDisplay,
			l.lect_create_date			createDate,
			l.lect_grade				grade,
			l.lect_tag					tag,
			l.lect_image_path			imagePath,
			l.lect_sample_path			samplePath,
			u.user_name					userName,
			u.user_image_filename		userImagePath,
			u.user_self_introduction	userIntroduction
		from
			lects L, users U
		where
			l.user_no = u.user_no
			and l.lect_is_display = 'Y'	
			and l.lect_no = #{value}	
	</select>
	
	<!-- 레슨의 총 개수, 총 시간, 수강생의 진도률 조회 -->
	<select id="getProgressPercentInDashboard" parameterType="map" resultType="LessonDto">
		select 
			round(nvl(viewCount /  decode(totalCount,0,null,totalCount),0)  * 100) percent
			, totalTime
			, totalCount
			, totalAccumulate
			, viewCount
		from 
			(select 
		        count(*) 			 totalCount  <!-- 레슨 개수 -->
		        , sum(total_time) 	 totalTime   <!-- 레슨 통합 시간 -->
		    from 
		     	lects
	    	natural join chapters
	        natural join lessons
	        where 
	        	lect_no = #{lectureNo}) A 		 
		natural join 
			(select 
			    count(*) 				viewCount 	 	<!-- 내가 본 레슨 개수 -->
			    , sum(accumulate_time)  totalAccumulate <!-- 내가 본 레슨의 총 누적시간 -->
		    from 
		    	lesson_histories 
		    where 
		    	user_no = #{userNo} 
	    	and is_watched = 'Y'
	   		and lect_no = #{lectureNo}) B
	</select>
	
	 <!-- 수강생이 최근 시청한 레슨명 + 총 레슨 시간  rn: 시청 날짜순-->
	 <select id="getLessonByRecent" parameterType="map" resultType="Lesson">		   
		select *
		from
		    (select 
		        ROW_NUMBER() over (order by create_date desc) rn   
		       , lesson_no		no
		       , lesson_title	lessonTitle
		       , total_time 	totalTime
		    from lessons
		    natural join lesson_histories
		    where 
		        user_no = #{userNo}
		    and lect_no = #{lectureNo}
		    and last_time > 0)
		where 
		    rn &lt; 10
	 </select>
	
	<!-- 강좌별 레슨 개수, 총 시간 조회 -->
	<select id="getLessonCountAndLengthByLectureNo" parameterType="int" resultType="LessonDto">
		(select 
	        count(*) 			 totalCount 
	        , sum(total_time) 	 totalTime   
	    from 
	     	lects
    	natural join chapters
        natural join lessons
        where 
        	lect_no = #{lectureNo})
	</select>
	
	
	<!-- 조건별(필터)강좌 조회 -->
	<select id="getLectureByCriteria" parameterType="LectureCriteria" resultMap="lectureMap">
	 	select *
			from (
				select
				<choose>
					<when test="sort eq 'like'">
						ROW_NUMBER() over (order by NVL(likes,0) desc) rn,
					</when>
					<when test="sort eq 'price'">
						ROW_NUMBER() over (order by l.lect_price desc) rn,
					</when>
					<otherwise>
						ROW_NUMBER() over (order by l.lect_create_date desc) rn,
					</otherwise>
				</choose>
					l.lect_no					
					, l.cate_no				 	
					, l.user_no
					, l.lect_title				
					, l.lect_info					
					, l.lect_price				
					, l.lect_discount_price	
					, l.lect_discount_rate		
					, l.lect_is_freed				
					, l.lect_is_display			
					, l.lect_create_date			
					, l.lect_grade			
					, l.lect_tag					
					, l.lect_image_path			
					, u.user_name					
		            , NVL(likes,0) as "like"
				from
					lects L, users U, (select 
										 lect_no
										 , COUNT(*) as likes 
									  from 
									  	like_lects 
									  group by 
									 	lect_no) H
				where
					l.user_no = u.user_no
		         	and l.lect_no = h.lect_no(+)
		         	and l.lect_is_display = 'Y'
		         	and l.lect_title like '%' || #{keyword} || '%'
		         <if test="cateNo neq 0">
		         	and l.cate_no = #{cateNo}
		         </if>
	             <if test="grades != null and grades.length > 0">
	            	and l.lect_grade in 
		            <foreach collection="grades" item="grade" open="(" close=")" separator=",">
		            	#{grade}
		            </foreach>
	             </if>
	             <if test="options != null and options.length > 0">
	             	and l.lect_is_freed	in
	             	<foreach collection="options" item="option" open="(" close=")" separator=",">
	             		#{option}
	             	</foreach>
	             </if>
	       		<if test="discount == -1">
	           		and l.lect_discount_rate > 0
	            </if> 
	            )
        <![CDATA[
		where rn >= #{beginIndex} 
		and rn <= #{endIndex}    
        ]]>
	</select>
	
	<!-- 조건별(필터)강좌 카운트 조회 -->
	<select id="getLectureCountByCriteria" parameterType="LectureCriteria" resultType="int">
		select 
			count(*)
		from
			lects L, users U, (select 
								 lect_no
								 , COUNT(*) as likes 
							  from 
							  	like_lects 
							  group by 
							 	lect_no) H
		where
			l.user_no = u.user_no
         	and l.lect_no = h.lect_no(+)
         	and l.lect_is_display = 'Y'
	        <if test="cateNo neq 0">
	        	and l.cate_no = #{cateNo}
	        </if>
	        and l.lect_title like '%' || #{keyword} || '%'
            <if test="grades != null and grades.length > 0">
           	and l.lect_grade in 
            <foreach collection="grades" item="grade" open="(" close=")" separator=",">
            	#{grade}
            </foreach>
            </if>
            <if test="options != null and options.length > 0">
            	and l.lect_is_freed	in
            	<foreach collection="options" item="option" open="(" close=")" separator=",">
            		#{option}
            	</foreach>
            </if>
            <if test="discount == -1">
          		and l.lect_discount_rate > 0
            </if> 
	</select>
	
	<!-- 강좌별 모든 count 조회 -->
 	<select id="getAllCountByLectureNo" parameterType="int" resultType="LectureDto">
		 select A.lect_no, 
		 		U.user_name		as userName,
		    (select 
		    	count(*) 
		   	 from 
		   	 	ord_lect_infos B 
		   	 where 
		   	 	B.lect_no = A.lect_no) studentCnt,
		    (select 
		    	trunc(nvl(avg(review_star), 0)) 
		    from 
		    	reviews B, ord_lect_infos C 
		    where 
		    	B.ord_lect_no = C.ord_lect_no 
		    	and  C.lect_no = A.lect_no)	reviewStar,
		    (select 
		    	count(*)
		    from 
		        reviews R, ord_lect_infos O
		    where 
		        R.ord_lect_no = O.ord_lect_no
		   	 	and A.lect_no = O.lect_no) reviewCnt,
		   (select 
				count(*)
			from 
				like_lects B
			where
		    	A.lect_no = B.lect_no) likeCnt	 		
		from 
			lects A, users U    
		where 
			A.user_no = U.user_no
			and A.lect_no = #{value}
	</select>
	   
	<!-- All Lecture ResultMap -->
	<resultMap type="LectureCourseDto" id="lectureMap">
		<association property="lecture">
			<result column="lect_no" property="no"/>
			<result column="user_no" property="userNo"/>
			<result column="cate_no" property="cateNo"/>
			<result column="lect_title" property="lectTitle"/>
			<result column="lect_info" property="lectInfo"/>
			<result column="lect_info_title" property="lectInfoTitle"/>
			<result column="lect_price" property="price"/>
			<result column="lect_discount_price" property="discountPrice"/>
			<result column="lect_discount_rate" property="discountRate"/>
			<result column="lect_is_freed" property="isFreed"/>
			<result column="lect_is_display" property="isDisplay"/>
			<result column="lect_create_date" property="lectCreateDate"/>
			<result column="lect_image_path" property="imagePath"/>
			<result column="lect_sample_path" property="samplePath"/>
			<result column="lect_tag" property="tag"/>
			<result column="lect_grade" property="grade"/>
		</association>
		<collection column="lect_no" property="chapters" select="getChapterByLectureNo"/>
	</resultMap>

	<resultMap type="ChapterDto" id="chapterMap">
		<association property="chapter">
			<result column="chapter_no" property="no"/>
			<result column="chapter_name" property="chapterName"/>
			<result column="lect_no" property="lectNo"/>
		</association>
		<collection column="chapter_no" property="lessons" select="getLessonByChpaterNo"/>
	</resultMap>

	<resultMap type="Lesson" id="lessonMap">
		<result column="lesson_no" property="no" />
		<result column="chapter_no" property="chapterNo" />
		<result column="lesson_title" property="lessonTitle" />
		<result column="lesson_video_path" property="videoPath" />
		<result column="total_time" property="totalTime" />
		<result column="lesson_order" property="order" />
	</resultMap>
	
	<!-- 강좌번호로 챕터 조회 -->
	<select id="getChapterByLectureNo" parameterType="int" resultMap="chapterMap">
		select 
			chapter_no
			, lect_no
			, chapter_name
		from 
			chapters
		where
			lect_no = #{value}
		order 
			by chapter_no asc	
	</select>

	<!-- 챕터번호로 레슨 조회 -->		
	<select id="getLessonByChpaterNo" parameterType="int" resultMap="lessonMap">
		select 
			lesson_no
			, chapter_no
			, lesson_title
			, lesson_video_path
			, total_time
			, lesson_order	
		from 
			 lessons  
		where
    		chapter_no = #{value}	
    	order by
    		lesson_no asc		
	</select>
	
	<!-- ****************************** player ****************************** -->
	
	<!-- 강좌 플레이어 -->
	<select id="getLectureCourseByLecureNo" parameterType="int" resultMap="lectureMap">
		select 
		    lect_no
		    , lect_title
		from lects 
		where 
		    lect_no = #{value}
	</select>
	
	<!-- 회원번호와 레슨번호로 레슨히스토리 조회 -->
	<select id="getLessonHistoryByLessonHistory" parameterType="LessonHistory" resultType="LessonHistory">
		select 
            no					no
            , lect_no			lectNo
			, lesson_no			lessonNo
            , user_no			userNo
            , is_watched		isWatched
            , last_time			lastTime
            , accumulate_time	accumulateTime
            , create_date		createDate
		from 
			 lesson_histories 
		where
    		lesson_no = #{lessonNo}
        and user_no = #{userNo}
	</select>
	
	<!-- 레슨히스토리 생성 -->
	<insert id="insertLessonHistory" parameterType="LessonHistory">
		insert into lesson_histories
			(no, lect_no, lesson_no , user_no)
		values
			(lesson_history_seq.nextval, #{lectNo}, #{lessonNo}, #{userNo})
	</insert>
	
	<!-- 회원번호와 레슨번호로 업데이트 -->
	<update id="updateLessonByLessonHistory" parameterType="LessonHistory">
		update
			 lesson_histories
		set			 
             is_watched		=	#{isWatched}
            , last_time		=	#{lastTime}
            , accumulate_time =	#{accumulateTime}
       where
       		lesson_no = #{lessonNo}
        and user_no = #{userNo}
	</update>
	
	
	<!-- 레슨번호로 레슨 조회 -->
	<select id="getLessonByLessonNo" parameterType="int" resultType="Lesson">
		select  
			lesson_no				no
			, chapter_no			chapterNo
			, lesson_title			lessonTitle
			, lesson_video_path		videoPath
			, total_time			totalTime
			, lesson_order			"order"
		from 
			lessons
		where
			lesson_no = #{value}
	</select>
	
	<!-- ****************************** teacher ****************************** -->
	
	<!-- 강사가 등록한 강좌 조건별 조회 -->
	<select id="getLectureListByCriteria" parameterType="LectureCriteria" resultType="LectureDto">
		select *
		from 
			(select
				ROW_NUMBER() over (order by lect_create_date desc) rn
				, lect_no				no
			    , lect_title			title	
			    , lect_info				info
			    , lect_price			price
			    , lect_discount_price	discountPrice
			    , lect_discount_rate	discountRate
			    , lect_is_display		isDisplay
			    , lect_is_freed			isFreed
			    , lect_create_date		createDate
			    , lect_grade			grade
			    , lect_tag				tag
			    , lect_image_path		imagePath
			    , lect_sample_path		samplePath
			    , cate_name				cateName	
			    , user_no				userNo
			    , user_name				userName
			from 
				lects
			natural join users
			natural join categories
			where 
				user_no = #{userNo}
				and lect_title like '%' || #{keyword} || '%')
		<![CDATA[
		where rn >= #{beginIndex} 
		and rn <= #{endIndex}    
        ]]>		
	</select>
	
	<!-- 강사가 등록한 강좌 카운트 조회 -->
	<select id="getTeachersLectureCountByCriteria" parameterType="LectureCriteria" resultType="int">
		select 
			count(*)
		from 
			lects
		natural join users
		natural join categories
		where 
			user_no = #{userNo}
			and lect_title like '%' || #{keyword} || '%'
	</select>
	
	<!-- 조건별 강사 수익 테이블-->
	<select id="getTeacherIncomeByCriteria" parameterType="LectureCriteria" resultType="IncomeDto">
		select *
		from
			(select    
			    l.lect_no								 no
			    , l.lect_title							 title
			    , l.lect_grade							 grade
			    , l.lect_discount_price					 discountPrice
			    , c.cate_name							 cateName
			    , sum(l.lect_discount_price) 			 totalIncome
			    , sum(l.lect_discount_price * 80 / 100)  profit
			    , sum(ol.ord_lect_amount)				 studentCnt
			from 
			    lects l, ord_lects o, ord_lect_infos ol, users u, categories c
			where 
			    l.user_no = u.user_no
			and l.lect_no = ol.lect_no
			and o.ord_no = ol.ord_no
			and c.cate_no = l.cate_no
			and u.user_no = #{userNo}
			and l.lect_title like '%' || #{keyword} || '%'
			<if test="startDate != null and startDate neq ''">
				and to_char(o.ord_lect_create_date, 'yyyy-MM-dd') >= #{startDate}
			</if>
			<if test="endDate != null and endDate != ''">
				and to_char(o.ord_lect_create_date, 'yyyy-MM-dd') &lt;= #{endDate}
			</if>
			group by 
				l.lect_no
				, l.lect_title
				, l.lect_grade
				, l.lect_discount_price
				, c.cate_name) 
		order by 
			totalIncome desc
	</select>
	
	<!-- 강사의 총 수입, 총 판매 강좌 -->
	<select id="getTeacherIncomeStatistics" parameterType="int" resultType="IncomeDto">
		select
			 count(l.lect_no)				totalCount	
			, sum(l.lect_discount_price)	allTotalIncome
		from 
		    lects l, ord_lects o, ord_lect_infos ol, users u
		where 
		    l.user_no = u.user_no
		and l.lect_no = ol.lect_no
		and o.ord_no = ol.ord_no
		and u.user_no = #{value}
	</select>
	
	<!-- 강사 평점 구하기 -->
	<select id="getTeacherAvgScore" parameterType="int" resultType="double">
		select
			avg(r.review_star) 	teacherScore
		from 
		    lects l, ord_lects o, ord_lect_infos ol, users u, reviews r
		where 
		    l.user_no = u.user_no
		and l.lect_no = ol.lect_no
		and o.ord_no = ol.ord_no
		and ol.ord_lect_no = r.ord_lect_no
		and r.ord_lect_no = ol.ord_lect_no
		and u.user_no = #{value}
		group by 
			u.user_no
	</select>
	
</mapper>


































